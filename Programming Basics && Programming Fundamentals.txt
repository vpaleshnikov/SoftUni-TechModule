REPEAT STRING METHOD
--------------------
static String repeatStr(String str, int count){  
        StringBuilder sb = new StringBuilder();	

        for (int i = 0; i < count; i++) {
            sb.append(str);
        }
        return sb.toString();
    }
}
=========================================================================

Math.round ==> закръгля        ==> 2.3455 = 2 || 2.3455,3 = 2.346
Math.ceil  ==> закръгля нагоре ==> 2.3455 = 3
Math.floor ==> закръгля надолу ==> 2.3455 = 2
Math.max   ==> изкарва по-голямото число
Math.min   ==> изпарва по-малкото число
=========================================================================

break  ==> излиза от цикъла или проверката
return ==> излиза от класа или метода
========================================================================
IF НА ЕДИН РЕД ==>                условие    ако да   ако не 
                  var something = num == 1 ? "yes" : "no"
		example => ако текста съдържа 'even' изпиши 2(true) или 3(false)
		var text = Console.ReadLine();
		var resul = text == "even" ? 2 : 3;
=========================================================================
tryParse
---------
string something;
int value;
if(int.TryParse(something, out value));
--------
string something;
double value;
if(double.TryParse(something, out value));
---------
опитва се да парсне стринга към число и ако може го връща като value
ако не не прави нищо
=========================================================================
6573:
6 -> n/1000
5-> (n/100)%10
7 - > (n/10)%10
3 -> n%10
-----Друг вариант---
.Select(c => "" + c)
=========================================================================
Команди за нов ред в различните операционни системи
1.\n\r                -> за Windows
2.\n                  -> за Linux,Mac OS
3.Environment.NewLine -> работи за всички Операционни системи(windows,linux,max os)
======================================================================================================
GIT BASH!!
Команди
            уеб сайта
1.git clone <url>
2.git status
3.git pull
4.git add
5.git commit
-----------------------------------------------------------------------------------
GIT HUB !


======================================================================================================
Integer Types
-------------
1.||sbyte || [-128 …127]: signed 8-bit [-27 … 27-1]
2.||byte  || [0 … 255]: unsigned 8-bit [0 … 28-1]
3.||short || [-32 768 … 32 767]: signed 16-bit [-215 … 215-1]
4.||ushort|| [0 … 65 535]: unsigned 16-bit [0 … 216-1]
5.||int   || [-2 147 483 648 … 2 147 483 647]: signed 32-bit [-231 … 231-1]
6.||uint  || [0 … 4 294 967 295]: unsigned 32-bit [0 … 232-1]
7.||long  || [-9 223 372 036 854 775 808 … 9 223 372 036 854 775 807]: signed
8.||ulong || [0 … 18 446 744 073 709 551 615]: unsigned 64-bit [0 … 264-1]
=======================================================================================================================================
Integer Literals
-----------------
1. 0x or 0X ==>> 0xFE,0xA8F1,0xFFFFFF
2. u or U   ==>> 12345678U,0U
3. l or L   ==>> 9876543L,0L
=======================================================================================================================================
Floating-Point Numbers
-----------------------
float   ==>> 32bits,precision of 7 digits      ==>> from 10^-45 to 10^38   ==> default value = 0.0F
double  ==>> 64bits,precision of 15-16 digits  ==>> from 10^-324 to 10^308 ==> default value = 0.0D
decimal ==>> 128bits,precision of 28-29 digits ==>> from 10^-28 to 10^28   ==> default value = 0.0M
=======================================================================================================================================
Math
------
Math.round ==> закръгля        ==> 2.3455 = 2 || 2.3455,3 = 2.346
Math.ceil  ==> закръгля нагоре ==> 2.3455 = 3
Math.floor ==> закръгля надолу ==> 2.3455 = 2
Math.max   ==> изкарва по-голямото число => Math.max(2,4) => 4
Math.min   ==> изкарва по-малкото число  => Math.min(2,4) => 2
=======================================================================================================================================
Arrays
---------------------------------------------------------------------------------------------------------------------------------------
C#
--------
                                                            командa  |съединител|името на масива
1.Съединяване на информацията подадена от конзолата ===> string.Join (", "      ,array);
                                                          string.Join(","       ,new int[] { 1, 2, 3, 4});

2.Разделяне на информацията подадена от конзолата ===> Добавяме отгоре => using System.Linq
                                                                      четене       | разделяне | парсване към int | вкарване в масив
                                                       var numbers = Console.ReadLine().Split(' ').Select(int.Parse).ToArray();

                                                        масив от инт  |  четене         | разделяне
                                                     int[] numbers = Console.ReadLine().Split(' ');

														масив от дабъл
                                                     double[] numbers = Console.ReadLine().Split(' ');

														масив от стринг
                                                     string[] text = Console.ReadLine().Split(' ');
3.Разделяне на информацията подадена от конзолата с излишни спейсове =>
         var numbers = Console.ReadLine().Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries).Select(int.Parse).ToArray();
---------------------------------------------------------------------------------------------------------------------------------------
Java
-------------
1.Разделяне на информацията подадена от конзолата ==> 
1.1.масив от стринг | четене        | разделяне с двойни кавички !!
    string[] arr = scanner.nextLine().split(" ")
1.2.масив от инт ==> Добавяме отгоре => import java.util.Arrays;
                              четене           | разделяне | към инт                   | вкарване в масив
    int[] arr = Arrays.stream(scanner.nextLine().split(" ")).mapToInt(Integer::valueOf).toArray();
1.3.масив от дабъл ==> Добавяме отгоре => import java.util.Arrays;
    double[] arr = Arrays.stream(scanner.nextLine().split(" ")).mapToDouble(Double::valueOf).toArray();    
=======================================================================================================================================
Lists
---------------------------------------------------------------------------------------------------------------------------------------
1. Четене на лист от конзолата => 
1.1 Стринг    -> var text = new List<string>;
					text.Add("Peter");
					text.Add("Mimi");
1.2 Стринг    -> List<string> text = new List<string>();
				-for (int i = 0; i < text.Count; i++)
				-{
				-list.Add(Console.ReadLine());
				-}
1.3 String    -> string values = Console.ReadLine();
				-List<string> items = values.Split(' ').ToList();
1.4 String    -> var items = Console.ReadLine().Split(' ').ToList();
1.5 изчистване на ненужните спейсове => 
                 List<string> text = Console.ReadLine()
                .Split(new char[] { ',', ';', ':', '.', '!', '(', ')', '"', '\\', '/', '[', ']', ' ' }
                ,StringSplitOptions.RemoveEmptyEntries) 
                .ToList();
2.1. Интеджер -> var num = new List<int>;
				-num.Add(1);
				-...
2.2 Интеджер  -> List<int> num = new List<int>;
				-for	(int = 0; i < num.Count; i++)
				-{
				-	num.Add(int.Parse(Console.ReadLine()));
				-}
2.3 Integer   -> var items = Console.ReadLine().Split(' ').Select(int.Parse).ToList();
3.1 Double    -> var items = Console.ReadLine().Split(' ').Select(double.Parse).ToList();
--------------------------------------------------------------------------------------------------------------------------------------------------
Linq Commands 
----------------

1.     list.Add(element)               -> добавя елемент в листа
1.1.   list.AddRange(list)             -> добавя всички елементи от дадена колекция от лист
2.     list.Count                      -> номер на елементите в листа
3.     list.Remove(element)            -> премахва елемент (връща true/false(boolean операция))
4.     list.RemoveAt(index)            -> премахва елемент на дадения индекс
5.     list.Insert(index, element)     -> вкарва елемент на дадения индекс
6.     list.Contains(element)          -> определя дали елемента е в листа
7.     list.Sort()                     -> подрежда листа във възходящ ред
7.1.   Array.Sort(name of the array)   -> подрежда МАСИВА във възходящ ред
8.     list.Clear()                    -> изчиства целият лист
9.     list.Skip()                     -> пропуска елемент в листа
9.1.   list.Skip(2)                    -> пропуска първите 2 елемента в листа
10.    list.InsertRange()              -> вкарва множество от интове(не става за стрингове)
11.    list.RemoveRange(index,element) -> премахва елемента от дадения индекс
12.    list.IndexOf(element)           -> връща индекса на елемента
13.    list.Distinct()                 -> премахва повтарящите се елементи в листа(връща уникалните стойности в колекцията)
14.    list.Min()                      -> (за числа)намира най-малкото число
15.    list.Max()                      -> (за числа)намира най-голямото число
16.    list.Reverse()                  -> подрежда елементите в обратен ред
                                          за листове ревърсва оригиналният лист
	   									  за масиви прави нов масив (var result = list.Reverse())
17.    list.Take(some number)           -> взима първите дадени числа от листа
18.    list.Average()                   -> обхожда списъка и изчислява средно-аритметичната стойност
19.    list.Select()                    -> парсва към тип от числа
20.    list.OrderBy()                   -> list.OrderBy(num => num) -> сортира във възходящ ред (може да се ползва многократно)
21.    list.OrderByDescending()         -> list.OrderByDescending() -> сортира в обратен ред (може да се ползва многократно)
22.    list.ThenBy()                    -> сортира колекция по повече от един критерий (може да се ползва многократно)
23.    list.ThenByDescending()          -> сортира колекция по повече от един критерий в обратен ред (може да се ползва многократно)
24.    list.Where()                     -> list.Where(n => n % 2 == 0).toList(); -> филтрира и връща всяка стойност която отговаря на условието
                                              Търси | нещо | изпълнява условие | връща нещото в лист
                                               намира всяко четно число
25.    list.Count()                     -> list.Count(n => n % 2 == 0).toList(); -> връща броя на елементите, които отговарят на условието
26.    list.Any()                       -> проверява дали нещо го има в колекцията(връща true/false(bool))
                                          list.Any(n => n > 10) -> има ли поне едно число което отговаря на този критерии
27.    list.All()                       -> същото като .Any() ,но задължава всички елементи да изпълняват дадено условие
28.    list.Select()                    -> взима всеки елемент в колекцията и изпилнява условие 
                                          list.Select(int.Parse) -> парсва към инт всички елементи в колекцията
	   									list.Select(something => "Name: " + something) -> cw(something)-> Name: something(за всички елементи)
28.1   list.map() 						-> аналог на list.Select() в java
29.    list.First()                     -> връща първият елемент в колекцията (еквивалентно на list[0], но работи при HashSet)
29.1.  list.FirstOrDefault()            -> намира първото число което отговаря на условието, но ако не го намери не гърми, а връща дефолтната стойност на типът
30.    list.Last()                      -> връща последният елемент в колекцията
30.1.  list.LastOrDefault()             -> намира последното число което отговаря на условието, но ако не го намери не гърми, а връща дефолтната стойност на типът
31.    list.Single()                    -> връща единственото число, което отговаря на условието(ако има повече от 1 число което отговаря на условие ГЪРМИ!)
32.    list.Concat()                    -> list.Concat(otherList) -> комбинира две колекции ОТ ЕДИН ТИП! залепва втората колекция в края на първата			



----------------------------------------------------------
=================================
    dictionary.TryGetValue("key", out (име на променлива от типа на валюто)) -> проверява дали има киия и ако го има записва валюто в дадена променлива(виж TryParse);							
================================
---------------------------------------------------------------------------------------------------------------------------------------------------
HashSet<> => HashSet<int> => пази уникални стойност(т.е. няма повтарящи числа) и няма индекси


========================================
ROTATION ELEMENTS IN Array
----------------------
rotate element n times -> n = count % array.length;
-----------------------------
private static void RotateArray(int[] array)
        {
            //initualize last element
            var lastElement = array[array.Length - 1];

            //in reversed for loop move all elements 
            for (int i = array.Length - 1; i > 0; i--)
            {
                array[i] = array[i - 1];
            }
            //rotation
            array[0] = lastElement;
        }
-----------------------------------------
=========================================
using System.Diagnostics;

var stopwatch = Stopwatch.StartNew();
stopwatch.Stop();
stopwatch.Elapsed();


=========================================
String
-----------------------------------------
string.Compare(string1, string2, true/false) -> true - case Insensetive, false case Sensetive
string.Concat(string1, string2) -> залепя стрингове по-бързо отколкото с +
string.IndexOf("text") -> намира индекса на първият срещнат стринг в текста (text.IndexOf("pesho"))
							string.IndexOf("text, 6")
							       -->
							"some text"
							ако връща -1 -> не открива индекс
string.LastIndexOf("text") -> намира индекса на последният срещнат стринг в текста
							  string.LastIndexOf("text", 6) 
							     <---
							  "some text"
							  ако връща -1 -> не открива индекс
string.Substring() -> връща парче от дадения текст -> string.Substring(2) -> връща от 2рия индекс нататък
                                                      string.Substring(2,6) -> връща от 2рия индекс следващите 6 символа
string.Replace(първа стойност, втора стойност) ->   сменява стойността на стринга, в който търсим, с даден стринг
													string text = "Sofia Sofia Varna Sofia"
													string newText = string.Replace("Sofia", "Varna") -> резултат: "Varna Varna Burgas Varna"
string.Remove(startIndex, count) -> премахва стринг от дадения индекс ->
					string text = "Sofia Sofia Varna Sofia"
					string newText = string.Remove(3, 5) ->  резултат: Soffia Varna Sofia
------------------------------------------------------------------------------------------------------------------
StringBuilder
-------------
var sb = New StringBuilder();

sb.Append(стойност) -> залепя стойността в стрингбилдера
sb.AppendLine(стойност) -> добавя стойност И нова линия
sb.Length
sb.Replace(string oldStr, string newStr)
sb.Remove(int startIndex, int length)
sb.Insert(int index, string str)
sb.Clear()
sb[index] -> може да се edit на дадения индекс
sb.ToString() -> връща стойността като стринг


======================================
REGEX
--------------------------------------
[A-Z] 	 -> machва всички главни букви
[a-z] 	 -> machва всички малки букви
[0-9] 	 -> machва всички цифри
\w   	 -> machва всички малки букви,големи букви, цифри и ДОЛНА ЧЕРТА ! -> [A-Za-z0-9]
\W   	 -> machва всичко което \w не мачва !
\s   	 -> machва WHITE SPACE + TAB
\S   	 -> machва всичко което не е WHITE SPACE + TAB
\d   	 -> подобно на [0-9]
\D   	 -> machва всичко което не е цифра
\t   	 -> machва TAB
\n   	 -> machва нов ред
\b       -> word boundary (граница на дума преди или след)
. 		 -> специялен символ -> хваща всички елементи по отделно (ако искаме да мачнем самата точка -> "\.") -> .+ -> хващай всеки символ докато има такъв
* 		 -> machни ми даден елемент 0 или повече пъти (пример: \+\d* -> machни ми точния символ + и след това нула или едно число) или го има или го няма
+ 		 -> machни ми даден елемент поне 1 път или повече
? 		 -> machва 0 или 1 пъти
{6} 	 -> хваща точно 6 символа
{6,} 	 -> хваща от 6 без значение колко са 
{6, 12}  -> хваща от 6 до 12 символа
^ 		 -> искам дадения стринг да ЗАПОЧВА с даден символ (пример: ^\w{6,12} -> искам да ЗАПОЧВА с word и да е между 6 и 12 символа) ИЛИ знак за отрицание
$ 		 -> искам дадения стринг да ЗАВЪРШВА с даден символ (пример: \w{6,12} -> искам да ЗАВЪРШВА с word и да е между 6 и 12 символа)
| 		 -> "ИЛИ" (пример: (Hi|hello)) мачва Hi ИЛИ hello и проверката е ВИНАГИ в скоби !
?: 		 -> Пропуска група (пример: (ден)(?:месец)(година) -> връща (група #1 - ден, група #2 - година))
\1,\2,\3... 					  -> копира групата по индекса на групата -> \d{2}(\w{3})\d{3} -> има само 1 група която е в скоби -> (\w3) -> \d{2}(\w{3})\d{3}\1 == \d{2}\w{3}\d{3}\w{3} -> ако има 1 група, ако създадем 2ра група -> \2 и т.н.
(?<=символ) -> lookbehind искам ПРЕДИ патерна да имам дадения символ
(?=символ)  -> lookahead искам СЛЕД патерна да имам дадения символ

(?<nameOfTheGroup>...(символите)) -> създава група с име "nameOfTheGroup"
\k<nameOfTheGroup> 				  -> вика точно тази група
regex.isMatch 						  -> bool дали мачва точно текста ->  var text = "....";
											Regex regex = new Regex(pattern)
											bool име = regex.isMatch(text) -> true/false
var match = regex.Match(text)     -> мачва първият текст, който срещне
								cw..(match.Value);-> вади мача като стринг
match.Success 					  -> връща true/false, дали е мачнало нещо или не е
match.Groups[0].Value 			  -> връща целия мач
match.Groups[1...].Value 		  -> връща стойността на дадената група в мача
regex.Matches(text) 		      -> връща колекция от всички мачове
regex.Replace(text, replacement)  -> реплейсва всички мачове със това което сме му подали в replacement
$1,$2.... 						  -> взима стойността от група 1,2,3... и реплейсва -> взима стойността в групата и вкарва мача на мястото на $1...
																"[URL: href=$1]$2[\URL]";
Regex.Split(text, pattern)        -> сплитва дадения текст по pattern
(?<=\s) 					      -> positive lookbehind -> ако преди истинския регекс има спейс текста ще се мачне